@page "/usuario"
@page "/usuario/{Id:int}"

@*Referencias*@
@using Ecommerce.DTO
@using Ecommerce.WebAssembly.Servicios.Contrato
@inject IUsuarioServicio usuarioServicio
@inject IToastService toastService
@inject NavigationManager _navServicio

<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@titulo</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">
        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="input-group">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre Completo</span>
                <input type="text" class="form-control" @bind-value="modelo.NombreCompleto">
            </div>
            <ValidationMessage For="@(()=>modelo.NombreCompleto)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Correo</span>
                <input type="text" class="form-control" @bind-value="modelo.Correo"><br />
            </div>
            <ValidationMessage For="@(()=>modelo.Correo)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Contraseña</span>
                <input type="password" class="form-control" @bind-value="modelo.Clave">
            </div>
            <ValidationMessage For="@(()=>modelo.Clave)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Confirmar Contraseña</span>
                <input type="password" class="form-control" @bind-value="modelo.ConfirmarClave">
            </div>
            <ValidationMessage For="@(()=>modelo.ConfirmarClave)" />

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                <a href="/usuarios" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
        </EditForm>


    </div>

</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string titulo = "Nuevo usuario";
    private string boton = "Crear";
    private UsuarioDTO modelo = new UsuarioDTO();

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            titulo = "Editar Usuario";
            boton = "Editar";

            var response = await usuarioServicio.Obtener(Id);
            if (response.EsCorrecto!)
            {
                modelo = (UsuarioDTO)response.Resultado!;
                modelo.ConfirmarClave = modelo.Clave;
            }
            else
            {
                toastService.ShowWarning(response.Mensaje!);
            }
        }
    }

    private async Task GuardarCambios()
    {
        if (modelo.Clave != modelo.ConfirmarClave)
        {
            toastService.ShowWarning("Las claves no coinciden.");
            return;
        }

        bool respuesta = true;
        string mensaje = string.Empty;

        if (Id != 0)
        {
            var response = await usuarioServicio.Editar(modelo);
            if (response.EsCorrecto!)
            {
                mensaje = "Usuario editado.";
            }
            else
            {
                respuesta = false;
                mensaje = response.Mensaje!;
            }
        }
        else
        {
            modelo.Rol = "Administrador";
            var response = await usuarioServicio.Crear(modelo);
            if (response.EsCorrecto!)
            {
                mensaje = "Usuario creado.";
            }
            else
            {
                respuesta = false;
                mensaje = response.Mensaje!;
            }
        }

        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo("/usuarios");
        }
        else
        {
            toastService.ShowError(mensaje);
        }
    }
}